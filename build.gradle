apply plugin: "java"

targetCompatibility = 16
sourceCompatibility = JavaVersion.VERSION_16

sourceSets {
    main {
        java.srcDirs = ["src"]
        resources.srcDirs = ["locales"]
    }

    test {
        java.srcDirs = []
        resources.srcDirs = []
    }
}

ext {
    //the build number that this mod is made for
    mindustryVersion = 'v145'
    jabelVersion = "93fde537c7"
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")

    modCore = {String name ->
        if(name.startsWith(":")) {
            name = name.substring(1)
        }

        return "com.github.MindustryExtended13.Me13Core:$name:533faaf615"
    }

    prjRoot = project.projectDir.toString()
}

group = "io.me13.se"
version '1.0'

repositories {
    mavenCentral()

    maven {
        url 'https://maven.xpdustry.com/anuken'
    }

    maven {
        url 'https://www.jitpack.io'
    }
}

dependencies {
    //main components
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.MindustryJitpack:core:$mindustryVersion"
    compileOnly 'org.jetbrains:annotations:23.0.0'
    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"

    //ME13 components
    implementation modCore(':units')
    implementation modCore(":logger")
}

tasks.withType(JavaCompile).tap {
    configureEach {
        options.compilerArgs.addAll(['--release', '16'])
    }
}

//force arc version
configurations.configureEach {
    resolutionStrategy.eachDependency { details ->
        if(details.requested.group == 'com.github.Anuken.Arc'){
            details.useVersion "$mindustryVersion"
        }
    }
}

jar {
    var prop = gradle.startParameter.projectProperties
    String asString = null

    if(prop.containsKey('ex')) {
        asString = "${archivesBaseName}Desktop.${prop.get('ex')}"
    } else {
        println('Using default file exception (jar)')
        asString = "${archivesBaseName}Desktop.jar"
    }

    archiveFileName = asString

    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    from(rootDir) {
        include "mod.json"
        include "icon.png"
    }

    println("$prjRoot")

    doLast {
        if(prop.containsKey('path')) {
            copy {
                println("Copy file ${asString} to destonation")
                from layout.buildDirectory.file("libs/$asString")
                into layout.buildDirectory.dir(prop.get('path'))
            }
        }

        if(prop.containsKey('m')) {
            exec {
                commandLine 'cmd', '/c', "\"${prop.get('m')}\""
            }
        }
    }
}

tasks.register('copyGraphicsResources', Copy) {
    from "$prjRoot\\graphics"
    include "**"
    into "$buildDir/resources/main/sprites"
}

processResources.dependsOn copyGraphicsResources